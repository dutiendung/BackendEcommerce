// <auto-generated />
using System;
using Example07.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(Example07Context))]
    [Migration("20230608152718_Ex7")]
    partial class Ex7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Photo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("photo");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'inactive')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_banners_id");

                    b.HasIndex(new[] { "Slug" }, "banners$banners_slug_unique")
                        .IsUnique();

                    b.ToTable("banners", (string)null);
                });

            modelBuilder.Entity("Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_brands_id");

                    b.HasIndex(new[] { "Slug" }, "brands$brands_slug_unique")
                        .IsUnique();

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("price");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'new')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_carts_id");

                    b.HasIndex(new[] { "OrderId" }, "carts_order_id_foreign");

                    b.HasIndex(new[] { "ProductId" }, "carts_product_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "carts_user_id_foreign");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("added_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<short>("IsParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("is_parent")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Photo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("photo");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'inactive')");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_categories_id");

                    b.HasIndex(new[] { "Slug" }, "categories$categories_slug_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "AddedBy" }, "categories_added_by_foreign");

                    b.HasIndex(new[] { "ParentId" }, "categories_parent_id_foreign");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'inactive')");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("(N'fixed')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(20, 2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK_coupons_id");

                    b.HasIndex(new[] { "Code" }, "coupons$coupons_code_unique")
                        .IsUnique();

                    b.ToTable("coupons", (string)null);
                });

            modelBuilder.Entity("FailedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("connection");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("failed_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("queue");

                    b.HasKey("Id")
                        .HasName("PK_failed_jobs_id");

                    b.ToTable("failed_jobs", (string)null);
                });

            modelBuilder.Entity("Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("photo");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime")
                        .HasColumnName("read_at");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_messages_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("data");

                    b.Property<long>("NotifiableId")
                        .HasColumnType("bigint")
                        .HasColumnName("notifiable_id");

                    b.Property<string>("NotifiableType")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("notifiable_type");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime")
                        .HasColumnName("read_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_notifications_id");

                    b.HasIndex(new[] { "NotifiableType", "NotifiableId" }, "notifications_notifiable_type_notifiable_id_index");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("country");

                    b.Property<decimal?>("Coupon")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("coupon");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("last_name");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("payment_method")
                        .HasDefaultValueSql("(N'cod')");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("(N'unpaid')");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("phone");

                    b.Property<string>("PostCode")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("post_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<long?>("ShippingId")
                        .HasColumnType("bigint")
                        .HasColumnName("shipping_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'new')");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_orders_id");

                    b.HasIndex(new[] { "OrderNumber" }, "orders$orders_order_number_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "ShippingId" }, "orders_shipping_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "orders_user_id_foreign");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("added_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Photo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("photo");

                    b.Property<long?>("PostCatId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_cat_id");

                    b.Property<long?>("PostTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_tag_id");

                    b.Property<string>("Quote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("quote");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("Tags")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_posts_id");

                    b.HasIndex(new[] { "Slug" }, "posts$posts_slug_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "AddedBy" }, "posts_added_by_foreign");

                    b.HasIndex(new[] { "PostCatId" }, "posts_post_cat_id_foreign");

                    b.HasIndex(new[] { "PostTagId" }, "posts_post_tag_id_foreign");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("PostCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_post_categories_id");

                    b.HasIndex(new[] { "Slug" }, "post_categories$post_categories_slug_unique")
                        .IsUnique();

                    b.ToTable("post_categories", (string)null);
                });

            modelBuilder.Entity("PostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("RepliedComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("replied_comment");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_post_comments_id");

                    b.HasIndex(new[] { "PostId" }, "post_comments_post_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "post_comments_user_id_foreign");

                    b.ToTable("post_comments", (string)null);
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_post_tags_id");

                    b.HasIndex(new[] { "Slug" }, "post_tags$post_tags_slug_unique")
                        .IsUnique();

                    b.ToTable("post_tags", (string)null);
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    b.Property<long?>("CatId")
                        .HasColumnType("bigint")
                        .HasColumnName("cat_id");

                    b.Property<long?>("ChildCatId")
                        .HasColumnType("bigint")
                        .HasColumnName("child_cat_id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("condition")
                        .HasDefaultValueSql("(N'default')");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("discount");

                    b.Property<short>("IsFeatured")
                        .HasColumnType("smallint")
                        .HasColumnName("is_featured");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("photo");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("size")
                        .HasDefaultValueSql("(N'M')");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'inactive')");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stock")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_products_id");

                    b.HasIndex(new[] { "Slug" }, "products$products_slug_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "BrandId" }, "products_brand_id_foreign");

                    b.HasIndex(new[] { "CatId" }, "products_cat_id_foreign");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ProductReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasColumnName("rate");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_product_reviews_id");

                    b.HasIndex(new[] { "ProductId" }, "product_reviews_product_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "product_reviews_user_id_foreign");

                    b.ToTable("product_reviews", (string)null);
                });

            modelBuilder.Entity("Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("logo");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("photo");

                    b.Property<string>("ShortDes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_des");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_settings_id");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_shippings_id");

                    b.ToTable("shippings", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("password");

                    b.Property<string>("Photo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("photo");

                    b.Property<string>("Provider")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("provider_id");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("remember_token");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("role")
                        .HasDefaultValueSql("(N'user')");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("(N'active')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_users_id");

                    b.HasIndex(new[] { "Email" }, "users$users_email_unique")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("amount");

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cart_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("price");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_wishlists_id");

                    b.HasIndex(new[] { "CartId" }, "wishlists_cart_id_foreign");

                    b.HasIndex(new[] { "ProductId" }, "wishlists_product_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "wishlists_user_id_foreign");

                    b.ToTable("wishlists", (string)null);
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("carts$carts_order_id_foreign");

                    b.HasOne("Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("carts$carts_product_id_foreign");

                    b.HasOne("User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("carts$carts_user_id_foreign");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.HasOne("User", "AddedByNavigation")
                        .WithMany("Categories")
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("categories$categories_added_by_foreign");

                    b.HasOne("Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("categories$categories_parent_id_foreign");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("orders$orders_shipping_id_foreign");

                    b.HasOne("User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("orders$orders_user_id_foreign");

                    b.Navigation("Shipping");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Post", b =>
                {
                    b.HasOne("User", "AddedByNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("posts$posts_added_by_foreign");

                    b.HasOne("PostCategory", "PostCat")
                        .WithMany("Posts")
                        .HasForeignKey("PostCatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("posts$posts_post_cat_id_foreign");

                    b.HasOne("PostTag", "PostTag")
                        .WithMany("Posts")
                        .HasForeignKey("PostTagId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("posts$posts_post_tag_id_foreign");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("PostCat");

                    b.Navigation("PostTag");
                });

            modelBuilder.Entity("PostComment", b =>
                {
                    b.HasOne("Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("post_comments$post_comments_post_id_foreign");

                    b.HasOne("User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("post_comments$post_comments_user_id_foreign");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("products$products_brand_id_foreign");

                    b.HasOne("Category", "Cat")
                        .WithMany("Products")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("products$products_cat_id_foreign");

                    b.Navigation("Brand");

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("ProductReview", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("product_reviews$product_reviews_product_id_foreign");

                    b.HasOne("User", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_reviews$product_reviews_user_id_foreign");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wishlist", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany("Wishlists")
                        .HasForeignKey("CartId")
                        .HasConstraintName("wishlists$wishlists_cart_id_foreign");

                    b.HasOne("Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("wishlists$wishlists_product_id_foreign");

                    b.HasOne("User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("wishlists$wishlists_user_id_foreign");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Post", b =>
                {
                    b.Navigation("PostComments");
                });

            modelBuilder.Entity("PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductReviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Categories");

                    b.Navigation("Orders");

                    b.Navigation("PostComments");

                    b.Navigation("Posts");

                    b.Navigation("ProductReviews");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
